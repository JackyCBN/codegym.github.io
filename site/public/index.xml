<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Casper Theme</title>
    <link>/</link>
    <description>Recent content on Casper Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 28 Jul 2017 15:06:07 -0400</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>223Using Asciidoc for Web Development</title>
      <link>/post/dotscale-2014-as-a-sketch/</link>
      <pubDate>Fri, 28 Jul 2017 15:06:07 -0400</pubDate>
      
      <guid>/post/dotscale-2014-as-a-sketch/</guid>
      <description>1C++ Delegate学习记录 看同事代码，看到Delegate相关的，有点好奇为何不直接用std::function, 而要自己封装一个，想来应该有原因的。虽然以前开发用C++,但近几年一直在开发手游，C++11相关也不是很熟悉，就把自己学习做一个记录。
为何要重复造轮子? 想来应该是std::function没有办法满足大家的需求，我大概总结一下，无非以下几点原因： - 是否动态分配内存 - 是否可比较，方便写事件系统 - 语法是否使用舒服 - 是否支持lambda新的语法 - 性能问题
先放结论 就本人来说，还是倾向于直接使用std::function： - 是否动态分配内存: 就像What you need not know about std::function里所说的，各个编译器的实现肯定会做SBO (Small Buffer Optimization), 所以一般是不会有动态分配的，只有超过这个buffer大小,才需要动态分配 - 是否可比较，方便写事件系统: 不可比较,的确是function的主要缺点，但是就像boost::signal,一样可以实现想要的功能，所以并不算一个大问题 - 语法是否使用舒服: 语法非常的强大,使用舒服 - 是否支持lambda新的语法: 支持 - 性能问题: std::function Performance benchmarks也论证了没有任何性能问题
前人的实现 前C++ 11时代  FastDelegate: 虽然写法比较hack,但是非常好用，而且对底层的成员函数指针实现，也有比较透彻的解释。 The Impossibly Fast C++ Delegates: 对FastDelegate主要改进就是不需要分配内存，但语法层面就不怎么友好了，个人不是很喜欢 Fast C++ Delegate: 对前面几个Delegate的实现做了点评  后C++ 11时代  std::function: 标准库提供的 The Impossibly Fast C++ Delegates, Fixed: 用C++ 11改进The Impossibly Fast C++ Delegates的实现  #### 实现的Code Review - C++ delegate implementation with member functions: 目前项目的代码就是基于这个实现来改进， code review的人不但点评的很精彩，提供的几个实现也非常好 - Impossibly fast delegate in C++11: C++ 11的实现</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Delegate学习记录</title>
      <link>/post/2018-09-20-cpp-delegate-study-record/</link>
      <pubDate>Fri, 28 Jul 2017 15:06:07 -0400</pubDate>
      
      <guid>/post/2018-09-20-cpp-delegate-study-record/</guid>
      <description>Table of Contents 起因 为何要重复造轮子 个人选择 各种实现 前C++ 11时代 C++ 11时代 实现的Code Review   性能比较   起因 看同事代码，看到Delegate相关，有点好奇为何不直接用 std::function 而要自己封装一个，想来应该有原因的。虽然以前开发用C++,但近几年一直在开发手游，C++11相关也不是很熟悉，就把自己学习做一个记录。
   为何要重复造轮子 想来应该是 std::function 没有办法满足大家的需求，我大概总结一下，无非以下几点原因：
   是否要求动态分配内存
  是否可比较，方便写事件系统
  语法是否使用舒服
  是否支持lambda新的语法
  性能问题
     个人选择 就本人来说，还是倾向于直接使用 std::function：
   是否要求动态分配内存:
  就像 What you need not know about std::function 里所说的，各个编译器的实现肯定会做SBO (Small Buffer Optimization), 所以一般是不会有动态分配的，只有超过这个buffer大小,才需要动态分配</description>
    </item>
    
    <item>
      <title>First Post</title>
      <link>/post/first/</link>
      <pubDate>Thu, 22 Dec 2016 20:04:40 +0000</pubDate>
      
      <guid>/post/first/</guid>
      <description>Tristique integer nulla, velit orci elementum posuere odit urna amet, vel est amet etiam pharetra curabitur. Risus feugiat pharetra sit dui tempor sed, malesuada metus, ut sociis elementum, placerat dolor curabitur velit. Fermentum nulla, lacus volutpat, et neque suscipit vel nisl at, suspendisse sed consectetuer in. Donec ut tellus massa, ipsum placerat tincidunt, nam nunc amet sit aenean, eleifend porttitor non fermentum. Wisi ultricies ante nec ac dignissim, in neque suscipit eu blandit et, quis imperdiet.</description>
    </item>
    
    <item>
      <title>Second Post</title>
      <link>/post/second/</link>
      <pubDate>Fri, 09 Sep 2016 10:24:16 -0400</pubDate>
      
      <guid>/post/second/</guid>
      <description>Tristique integer nulla, velit orci elementum posuere odit urna amet, vel est amet etiam pharetra curabitur. Risus feugiat pharetra sit dui tempor sed, malesuada metus, ut sociis elementum, placerat dolor curabitur velit. Fermentum nulla, lacus volutpat, et neque suscipit vel nisl at, suspendisse sed consectetuer in. Donec ut tellus massa, ipsum placerat tincidunt, nam nunc amet sit aenean, eleifend porttitor non fermentum. Wisi ultricies ante nec ac dignissim, in neque suscipit eu blandit et, quis imperdiet.</description>
    </item>
    
    <item>
      <title>about</title>
      <link>/about/</link>
      <pubDate>Fri, 09 Sep 2016 10:15:23 -0400</pubDate>
      
      <guid>/about/</guid>
      <description> This is where our page Markdown content lives. </description>
    </item>
    
  </channel>
</rss>