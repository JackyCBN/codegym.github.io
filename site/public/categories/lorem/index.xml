<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lorem on Code Gym</title>
    <link>/categories/lorem/</link>
    <description>Recent content in Lorem on Code Gym</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/lorem/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>无责任猜想之基督教推广</title>
      <link>/post/2018-10-07-some-impressions-snow-queen/</link>
      <pubDate>Sun, 07 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-10-07-some-impressions-snow-queen/</guid>
      <description>无责任猜想之基督教推广 儿童剧情 国庆假期，开启溜娃模式，带儿子去看安徒生童话剧&amp;lt;&amp;lt;冰雪女王&amp;gt;&amp;gt;。
故事讲的是一个冰雪女王，认为人性都是坏的，所以不断的产生的不能融化的雪，同时该雪只要进入人类的眼睛，就会使人变邪恶。
然而长期陪伴在她身边的驯鹿不希望女王这样对待人类，就跟定了一个三天的赌约，来证明人类是有友情、爱情、亲情。
剧组的演绎 做为儿童剧演绎，该剧团个人认为有几点比较奇怪
 女主特别的走到台前，让小孩相互手牵手，连续三次吟诵基督的话
 竟然出现了四川的方言
 选择的舞蹈及配乐都是流行乐
  猜想 虽然本人没有什么相关的信仰，但也不排斥子女有信仰，同时也认为有信仰的人生可能更加的宽爱。
但是在这样一种儿童剧被植入信仰的感觉的确很不舒服。虽然没有办法确认剧团刻意为之。
印象中，基督教不像佛教，比较喜欢向人推广他们的宗教，以前在大学刚毕业时，就有身边的朋友推广过基督教。
所以个人认为，应该会有一推广基督教的组织存在，如果存在，那怎么样的推广效果最好，又最容易接受呢。
想来应该就是儿童了，儿童是一张白纸，先入为主，让他们脑中有相关的印象。所以如果做为推广人，在儿童剧做一些这方面的植入，的确算是非常有想法的。</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Delegate学习记录</title>
      <link>/post/2018-09-20-cpp-delegate-study-record/</link>
      <pubDate>Thu, 27 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-09-20-cpp-delegate-study-record/</guid>
      <description>C++ Delegate学习记录 起因 看同事代码，看到Delegate相关，有点好奇为何不直接用 std::function 而要自己封装一个，想来应该有原因的。虽然以前开发用C++,但近几年一直在开发手游，C++11相关也不是很熟悉，就把自己学习做一个记录。
为何要重复造轮子 想来应该是 std::function 没有办法满足大家的需求，我大概总结一下，无非以下几点原因：
 是否要求动态分配内存
 是否可比较，方便写事件系统
 语法是否使用舒服
 是否支持lambda新的语法
 性能问题
  个人选择 就本人来说，还是倾向于直接使用 std::function：
 是否要求动态分配内存:
 就像 What you need not know about std::function 里所说的，各个编译器的实现肯定会做SBO (Small Buffer Optimization), 所以一般是不会有动态分配的，只有超过这个buffer大小,才需要动态分配  是否可比较，方便写事件系统:
 不可比较,的确是function的*主要缺点*，但是可以类似于boost::signal,一样可以实现想要的功能，所以并不算一个大问题  语法糖: 强大语法
 是否支持lambda新的语法: 支持
 性能问题: std::function Performance benchmarks 的测试表现并没有性能问题
  各种实现 前C++ 11时代  FastDelegate:
 虽然写法比较hack,但是非常好用，而且对底层的成员函数指针实现，也有比较透彻的解释。  The Impossibly Fast C++ Delegates:</description>
    </item>
    
  </channel>
</rss>